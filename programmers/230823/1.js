// 경주로 건설

// 건설회사의 설계사인 죠르디는 고객사로부터 자동차 경주로 건설에 필요한 견적을 의뢰받았습니다.
// 제공된 경주로 설계 도면에 따르면 경주로 부지는 N x N 크기의 정사각형 격자 형태이며 각 격자는 1 x 1 크기입니다.
// 설계 도면에는 각 격자의 칸은 0 또는 1 로 채워져 있으며, 0은 칸이 비어 있음을 1은 해당 칸이 벽으로 채워져 있음을 나타냅니다.
// 경주로의 출발점은 (0, 0) 칸(좌측 상단)이며, 도착점은 (N-1, N-1) 칸(우측 하단)입니다. 죠르디는 출발점인 (0, 0) 칸에서 출발한 자동차가 도착점인 (N-1, N-1) 칸까지 무사히 도달할 수 있게 중간에 끊기지 않도록 경주로를 건설해야 합니다.
// 경주로는 상, 하, 좌, 우로 인접한 두 빈 칸을 연결하여 건설할 수 있으며, 벽이 있는 칸에는 경주로를 건설할 수 없습니다.
// 이때, 인접한 두 빈 칸을 상하 또는 좌우로 연결한 경주로를 직선 도로 라고 합니다.
// 또한 두 직선 도로가 서로 직각으로 만나는 지점을 코너 라고 부릅니다.
// 건설 비용을 계산해 보니 직선 도로 하나를 만들 때는 100원이 소요되며, 코너를 하나 만들 때는 500원이 추가로 듭니다.
// 죠르디는 견적서 작성을 위해 경주로를 건설하는 데 필요한 최소 비용을 계산해야 합니다.
// 예를 들어, 아래 그림은 직선 도로 6개와 코너 4개로 구성된 임의의 경주로 예시이며, 건설 비용은 6 x 100 + 4 x 500 = 2600원 입니다.
// 또 다른 예로, 아래 그림은 직선 도로 4개와 코너 1개로 구성된 경주로이며, 건설 비용은 4 x 100 + 1 x 500 = 900원 입니다.
// 도면의 상태(0은 비어 있음, 1은 벽)을 나타내는 2차원 배열 board가 매개변수로 주어질 때, 경주로를 건설하는데 필요한 최소 비용을 return 하도록 solution 함수를 완성해주세요.

function solution(board) {
  var answer = 0;

  let length = board.length;
  let d = [[0, 1], [1, 0], [0, -1], [-1, 0]];
  let q = [[0, 0, 0, 0], [0, 0, 1, 0]];
  let arr = Array.from({ length: length }, () => Array.from({ length: length }, () => Array(d.length).fill(Infinity)));
  const isInBoard = (x, y) => {
    return x >= 0 && x < length && y >= 0 && y < length && board[x][y] !== 1;
  }

  while (q.length) {

    let [x, y, pDirI, cost] = q.shift();

    d.map( ([dx, dy], nDirI) => {

      let [nx, ny] = [x + dx, y + dy];

      if (!isInBoard(nx, ny)) {
        return;
      }

      let newCost = cost + (pDirI === nDirI ? 100 : 600);

      if (newCost < arr[nx][ny][nDirI]) {
        arr[nx][ny][nDirI] = newCost;
        q.push([nx, ny, nDirI, newCost]);
      }

    });

  }

  answer = Math.min(...arr[length - 1][length - 1]);

  return answer;
}

console.log(solution([[0,0,0],[0,0,0],[0,0,0]])) // 900
console.log(solution([[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0],[0,0,0,0,1,0,0,0],[0,0,0,1,0,0,0,1],[0,0,1,0,0,0,1,0],[0,1,0,0,0,1,0,0],[1,0,0,0,0,0,0,0]])) // 3800
console.log(solution([[0,0,1,0],[0,0,0,0],[0,1,0,1],[1,0,0,0]])) // 2100
console.log(solution([[0,0,0,0,0,0],[0,1,1,1,1,0],[0,0,1,0,0,0],[1,0,0,1,0,1],[0,1,0,0,0,1],[0,0,0,0,0,0]])) // 3200