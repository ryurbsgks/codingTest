// 은진이는 도미노 게임을 좋아한다. 도미노는 직사각형 모양이고, 두 개의 정사각형으로 나누어져 있다. 그리고, 각 정사각형에는 0보다 크거나 같고, 9보다 작거나 같은 정수가 하나 쓰여 있다. 따라서, 가능한 모든 조각은 45조각이다. 조각은 뒤집을 수도 있어서, 숫자 1과 2가 포함된 조각은 다음과 같이 하나이다.
// +---+---+     +---+---+
// | 1 | 2 |     | 2 | 1 |
// +---+---+     +---+---+
// 안타깝게도, 장엄지가 조각 몇 개를 가지고 가버렸다. 따라서, 은진이는 은진이답게 남은 도미노 조각을 가지고 할 수 있는 게임을 생각했다. 바로 “남은 도미노 조각을 가지고 사이클 콜렉션을 만들 수 있을까?” 이다.
// 사이클 콜렉션이란, 조각을 공유하지 않는 1개 또는 그 이상의 사이클이 모인 집합이다. 사이클은 i번째 놓인 조각의 왼쪽 번호와 i-1번째 놓인 조각의 오른쪽 번호가 같은 것 끼리 배열한 것이다. 그리고, 가장 처음에 놓은 조각의 왼쪽 번호와 가장 마지막에 놓은 조각의 오른쪽 번호도 같아야 한다.
// +---+---++---+---++---+---++---+---++---+---++---+---+
// | 1 | 2 || 2 | 5 || 5 | 4 || 4 | 2 || 2 | 8 || 8 | 1 |
// +---+---++---+---++---+---++---+---++---+---++---+---+
// +---+---++---+---++---+---++---+---++---+---++---+---+
// | 1 | 2 || 2 | 4 || 4 | 5 || 5 | 2 || 2 | 8 || 8 | 1 |
// +---+---++---+---++---+---++---+---++---+---++---+---+
// +---+---++---+---++---+---+ +---+---++---+---++---+---+
// | 1 | 2 || 2 | 8 || 8 | 1 | | 4 | 5 || 5 | 2 || 2 | 4 |
// +---+---++---+---++---+---+ +---+---++---+---++---+---+
// 위의 그림은 같은 조각의 집합을 가지고 만들 수 있는 세 가지 사이클 콜렉션이다.
// 조각이 연결되어 있다는 말은, 조각을 둘러 싸고 있는 두 조각과 연결되어 있는 것이다. 물론, 처음 조각과 마지막 조각도 연결되어 있는 것이다.
// 두 사이클이 같다는 말은 각 조각이 두 사이클에서 같은 조각과 연결되어 있을 때이고, 두 사이클 콜렉션이 같다는 말은, 같은 사이클의 집합을 포함할 때이다.
// 남은 조각이 주어질 때, 사이클 콜렉션을 총 몇 개 만들 수 있는지 구하는 프로그램을 작성하시오. 조각은 모두 사용해야 한다.

const fs = require("fs");
const input = fs.readFileSync("/home/ryurbsgks5114/codingTest/baekjoon/input.txt").toString().trim().split("\n");
const newInput = input.slice(1, input.length);

function solution(arr) {

  let answer = 1;
  let N = Number(input[0]);
  let newArr = new Array(10).fill(0);
  let array = new Array(10).fill(0);

  array[0] = 1;

  for (let i = 0; i < N; i++) {

    let a = arr[i]

    newArr[Math.floor(a / 10)]++;
    newArr[a % 10]++;

  }

  for (let i = 2; i <= 8; i += 2) {
    array[i] = (i - 1) * array[i - 2];
  }

  for (let i = 0; i <= 9; i++) {
    answer *= array[newArr[i]];
  }

  return answer;
}

console.log(solution(newInput.map( (el) => Number(el))));